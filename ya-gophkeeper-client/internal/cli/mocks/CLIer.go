// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CLIer is an autogenerated mock type for the CLIer type
type CLIer struct {
	mock.Mock
}

// CallFn provides a mock function with given fields: _a0
func (_m *CLIer) CallFn(_a0 string) {
	_m.Called(_a0)
}

// GetHideUserPrint provides a mock function with given fields: _a0
func (_m *CLIer) GetHideUserPrint(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetHideUserPrint")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPrint provides a mock function with given fields: _a0
func (_m *CLIer) GetUserPrint(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPrint")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Println provides a mock function with given fields: _a0
func (_m *CLIer) Println(_a0 string) {
	_m.Called(_a0)
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *CLIer) Register(_a0 string, _a1 func()) {
	_m.Called(_a0, _a1)
}

// Run provides a mock function with given fields:
func (_m *CLIer) Run() {
	_m.Called()
}

// NewCLIer creates a new instance of CLIer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCLIer(t interface {
	mock.TestingT
	Cleanup(func())
}) *CLIer {
	mock := &CLIer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	entity "yandex-gophkeeper-client/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// GetByLocalAll provides a mock function with given fields:
func (_m *UseCase) GetByLocalAll() (*[]entity.ItemDto, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetByLocalAll")
	}

	var r0 *[]entity.ItemDto
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]entity.ItemDto, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]entity.ItemDto); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.ItemDto)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByServerAll provides a mock function with given fields:
func (_m *UseCase) GetByServerAll() (*[]entity.ItemDto, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetByServerAll")
	}

	var r0 *[]entity.ItemDto
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]entity.ItemDto, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]entity.ItemDto); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.ItemDto)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: data, meta
func (_m *UseCase) Save(data []byte, meta string) error {
	ret := _m.Called(data, meta)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string) error); ok {
		r0 = rf(data, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetToken provides a mock function with given fields: token
func (_m *UseCase) SetToken(token string) {
	_m.Called(token)
}

// Sync provides a mock function with given fields:
func (_m *UseCase) Sync() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	entity "yandex-gophkeeper-server/internal/storage/entity"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: userID
func (_m *UseCase) GetAll(userID int) (*[]entity.Item, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *[]entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*[]entity.Item, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) *[]entity.Item); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *UseCase) GetById(id int) (*entity.Item, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*entity.Item, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *entity.Item); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: id
func (_m *UseCase) Remove(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: userId, dto
func (_m *UseCase) Save(userId int, dto *entity.CreateDto) error {
	ret := _m.Called(userId, dto)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *entity.CreateDto) error); ok {
		r0 = rf(userId, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
